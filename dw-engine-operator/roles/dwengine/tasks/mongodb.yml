---
- name: Check for specified mongodb configuration
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ meta.name }}-mongodb-configuration'
  register: _mongodb_config_resources
  no_log: false

- block:
    - name: generate ramdon password
      set_fact:
        database_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
      no_log: true
      
    - name: Create mongodb configuration
      k8s:
        apply: true
        definition: "{{ lookup('template', 'mongodb_secret.yaml.j2') }}"
      no_log: true
  when: not _mongodb_config_resources['resources'] | default([]) | length

- name: create mongodb pvc
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata: 
        name: '{{ meta.name }}-mongodb'
        namespace: '{{ meta.namespace }}'
      spec:
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: '{{ database_pvc_size }}'

- name: start mongodb statefulset
  k8s:
    definition:
      kind: StatefulSet
      apiVersion: apps/v1
      metadata:
        name: '{{ meta.name }}-mongodb'
        namespace: '{{ meta.namespace }}'
      spec:
        serviceName: mongodb
        selector:
          matchLabels:
            app: '{{ meta.name }}-mongodb'
        template:
          metadata:
            labels:
              app: '{{ meta.name }}-mongodb'
          spec:
            containers:
            - name: mongodb
              image: '{{ database_image }}'
              resources:
                limits:
                  memory: '{{ database_mem_limit }}'
                  cpu: '{{ database_cpu_limit }}'
              ports:
              - name: mongodb
                containerPort: 27017
              volumeMounts:
                - mountPath: /data/db
                  name: mongodata
              env:
                - name: MONGO_INITDB_ROOT_USERNAME
                  valueFrom: 
                    secretKeyRef:
                      name: '{{ meta.name }}-mongodb-configuration'
                      key: username
                - name: MONGO_INITDB_ROOT_PASSWORD
                  valueFrom: 
                    secretKeyRef:
                      name: '{{ meta.name }}-mongodb-configuration'
                      key: password
                - name: MONGO_INITDB_DATABASE
                  valueFrom: 
                    secretKeyRef:
                      name: '{{ meta.name }}-mongodb-configuration'
                      key: database
            volumes:
            - name: mongodata
              persistentVolumeClaim:
                claimName: '{{ meta.name }}-mongodb'
- name: start mongodb service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: '{{ meta.name }}-mongodb'
        namespace: '{{ meta.namespace }}'
      spec:
        selector:
          app: '{{ meta.name }}-mongodb'
        ports:
          - name: mongodb
            port: 27017
            targetPort: 27017
            protocol: TCP
