---
- name: Check for specified rabbitmq secret
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ meta.name }}-rabbitmq-secret'
  register: _rabbitmq_secret_resources
  no_log: false

- block:
    - name: generate ramdon password
      set_fact:
        mq_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
      no_log: true

    - name: Create rabbitmq secrets
      k8s:
        apply: true
        definition: "{{ lookup('template', 'rabbitmq_secret.yaml.j2') }}"
      no_log: false
  when: not _rabbitmq_secret_resources['resources'] | default([]) | length

- name: create rabbitmq pvc
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata: 
        name: '{{ meta.name }}-rabbitmq'
        namespace: '{{ meta.namespace }}'
      spec:
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: '{{ mq_pvc_size }}'

- name: start rabbitmq statefulset
  k8s:
    definition:
      kind: StatefulSet
      apiVersion: apps/v1
      metadata:
        name: '{{ meta.name }}-rabbitmq'
        namespace: '{{ meta.namespace }}'
      spec:
        serviceName: rabbitmq
        selector:
          matchLabels:
            app: '{{ meta.name }}-rabbitmq'
        template:
          metadata:
            labels:
              app: '{{ meta.name }}-rabbitmq'
          spec:
            containers:
            - name: rabbitmq
              image: '{{ mq_image }}'
              resources:
                limits:
                  memory: '{{ mq_mem_limit }}'
                  cpu: '{{ mq_cpu_limit }}'
              ports:
                - name: rabbitmq
                  containerPort: 5672
                - name: rabbitmq-admin
                  containerPort: 15672
              volumeMounts:
                - mountPath: /var/lib/rabbitmq
                  name: rabbitmqdata
                - mountPath: /etc/rabbitmq/
                  name: config
                  readonly: true
              command:
                - /bin/sh
                - -c
              args: 
                - chmod 600 /var/lib/rabbitmq/.erlang.cookie; rabbitmq-server
            volumes:
              - name: rabbitmqdata
                persistentVolumeClaim:
                  claimName: '{{ meta.name }}-rabbitmq'
              - name: config
                secret:
                  secretName: '{{ meta.name }}-rabbitmq-secret'
                  items: 
                    - key: definitions.json
                      path: definitions.json
                    - key: rabbitmq.conf
                      path: rabbitmq.conf
                      
- name: start rabbitmq service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: '{{ meta.name }}-rabbitmq'
        namespace: '{{ meta.namespace }}'
      spec:
        selector:
          app: '{{ meta.name }}-rabbitmq'
        ports:
          - name: rabbitmq
            port: 5672
            targetPort: 5672
            protocol: TCP
          - name: rabbitmq-admin
            port: 15672
            targetPort: 15672
            protocol: TCP
